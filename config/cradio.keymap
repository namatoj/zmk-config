// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE SEMICOLON>; };

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <5 6 2 1>;
            then-layer = <7>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab2 {
            bindings = <&kp TAB>;
            key-positions = <2 3>;
        };

        esc2 {
            bindings = <&kp ESCAPE>;
            key-positions = <10 11>;
        };

        globe {
            bindings = <&sk GLOBE>;
            key-positions = <21 22>;
        };

        media {
            bindings = <&sl 4>;
            key-positions = <30 31>;
        };

        fun {
            bindings = <&sl 3>;
            key-positions = <33 32>;
        };

        leftshift {
            bindings = <&sk LSHIFT>;
            key-positions = <22 23>;
        };

        rightshift {
            bindings = <&sk RSHIFT>;
            key-positions = <26 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q         &kp W       &kp E        &kp R           &kp T          &kp Y        &kp U            &kp I        &kp O            &kp SINGLE_QUOTE
&ht LSHIFT A  &ht LALT S  &ht LCTRL D  &ht LEFT_GUI F  &kp G          &kp H        &ht RGUI J       &ht RCTRL K  &ht RIGHT_ALT L  &ht RSHFT SEMI
&kp Z         &kp X       &kp C        &kp V           &kp B          &kp N        &kp M            &kp COMMA    &kp DOT          &kp FSLH
                                       &lt 5 ESCAPE    &lt 6 SPACE    &lt 2 ENTER  &lt 1 BACKSPACE
            >;
        };

        num {
            bindings = <
&kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp RIGHT_BRACKET    &trans  &trans  &trans  &trans  &trans
&kp P             &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL            &trans  &trans  &trans  &trans  &trans
&kp GRAVE         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH        &trans  &trans  &trans  &trans  &trans
                                              &kp NUMBER_0  &kp MINUS            &trans  &trans
            >;
        };

        sym {
            bindings = <
&kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans  &trans  &trans  &trans  &trans
&kp LS(P)       &kp DOLLAR       &kp PERCENT   &kp CARET              &kp PLUS           &trans  &trans  &trans  &trans  &trans
&kp TILDE       &kp EXCLAMATION  &kp AT        &kp HASH               &kp PIPE           &trans  &trans  &trans  &trans  &trans
                                               &kp RIGHT_PARENTHESIS  &kp UNDER          &trans  &trans
            >;
        };

        fun {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &trans    &trans  &trans  &trans  &trans  &trans
&kp F11  &kp F4  &kp F5  &kp F6  &trans    &trans  &trans  &trans  &trans  &trans
&kp F10  &kp F1  &kp F2  &kp F3  &trans    &trans  &trans  &trans  &trans  &trans
                         &trans  &trans    &trans  &trans
            >;
        };

        media {
            bindings = <
&trans  &trans  &trans  &trans  &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans        &trans        &kp C_PREV        &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT
&trans  &trans  &trans  &trans  &trans        &trans        &trans            &kp C_MUTE    &trans        &trans
                        &trans  &trans        &kp C_STOP    &kp C_PLAY_PAUSE
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &kp F17  &kp F18   &kp F19    &kp F20    &kp F21
&trans  &trans  &trans  &trans  &trans    &trans   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT
&trans  &trans  &trans  &trans  &trans    &trans   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END
                        &trans  &trans    &trans   &trans
            >;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans    &trans     &trans          &trans          &trans        &trans
&trans  &trans  &trans  &trans  &trans    &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT
&trans  &trans  &trans  &trans  &trans    &trans     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
                        &trans  &trans    &mkp LCLK  &mkp RCLK
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &trans  &trans      &bt BT_SEL 0    &trans  &trans  &trans  &trans  &sys_reset
&bootloader  &trans  &trans  &trans      &bt BT_SEL 1    &trans  &trans  &trans  &trans  &bootloader
&trans       &trans  &trans  &bt BT_CLR  &bt BT_SEL 2    &trans  &trans  &trans  &trans  &trans
                             &trans      &trans          &trans  &trans
            >;
        };
    };
};
